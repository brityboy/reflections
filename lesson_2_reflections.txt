What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized, a .git file is made to keep track of all the version changes throughout the repository's history.
This needs to be done to track changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is different from the working directory because the working directory is the path that contains all files
while the staging area only contains the files that are to be tracked. the values are different because working directory
shows the entire path while the staging area shows both the tracked files and the working directory

How can you use the staging area to make sure you have one commit per logical change?

use git stage to see what changed - although - oops, i forgot to do this last time

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help when there are divergences in the development direction. They help by sorting the commit history
by development direction. Branches help by acting as categories pre development direction to organize code under.

How do the diagrams help you visualize the branch structure?

Diagrams help visualize the branch structure by showing the parent-commit relationship histories through lines

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together combines the code in one branch and the other. We represent it in the diagram
as two paths that have converged to show that there is a time in history when the code was developed separately
as two different branches prior to merging

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pro of automatic merging - to fix code that obviously needs mergine. Con is that it takes effort to track it.